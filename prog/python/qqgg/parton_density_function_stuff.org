#+PROPERTY: header-args :exports both :output-dir results :session pdf :kernel python3
#+TITLE: Investigaton of Parton Density Functions
#+AUTHOR: Valentin Boettcher

* Init
** Required Modules
#+begin_src jupyter-python :exports both
  import numpy as np
  import matplotlib.pyplot as plt
  import monte_carlo
#+end_src

#+RESULTS:

** Utilities
#+BEGIN_SRC jupyter-python :exports both
%run ../utility.py
%run tangled/plot_utils.py
%load_ext autoreload
%aimport monte_carlo
%autoreload 1
#+END_SRC

#+RESULTS:

** Global Config
#+begin_src jupyter-python :exports both :results raw drawer
η = 2.5
e_proton = 6500  # GeV
interval_η = [-η, η]
interval = η_to_θ([-η, η])
interval_cosθ = np.cos(interval)
num_samples = 10_000
#+end_src

#+RESULTS:

* Lab Frame XS
We begin by implementing the same sermon for the lab frame.
#+begin_src jupyter-python :exports both :results raw drawer :tangle tangled/pdf.py
  """
  Implementation of the analytical cross section for q q_bar ->
  γγ in the lab frame.

  Author: Valentin Boettcher <hiro@protagon.space>
  """

  import numpy as np
  import monte_carlo
  import lhapdf
  from numba import jit, vectorize, float64


  @vectorize([float64(float64, float64, float64, float64)], nopython=True)
  def energy_factor(e_proton, charge, x_1, x_2):
      """Calculates the factor common to all other values in this module.

      :param e_proton: proton energy per beam
      :param charge: charge of the quark
      :param x_1: momentum fraction of the first quark
      :param x_2: momentum fraction of the second quark

      """
      return charge ** 4 / (137.036 * e_proton) ** 2 / (24 * x_1 * x_2)


  def momenta(e_proton, x_1, x_2, cosθ, φ=None):
      """Given the Energy of the incoming protons `e_proton` and the
      momentum fractions `x_1` and `x_2` as well as the cosine of the
      azimuth angle of the first photon the 4-momenta of all particles
      are calculated.
      """
      x_1 = np.asarray(x_1)
      x_2 = np.asarray(x_2)
      cosθ = np.asarray(cosθ)

      if φ is None:
          φ = 0
          cosφ = np.ones_like(cosθ)
          sinφ = 0

      else:
          if φ == "rand":
              φ = np.random.uniform(0, 2 * np.pi, cosθ.shape)
          else:
              φ = np.asarray(φ)
          sinφ = np.sin(φ)
          cosφ = np.cos(φ)

      assert (
          x_1.shape == x_2.shape == cosθ.shape
      ), "Invalid shapes for the event parameters."

      sinθ = np.sqrt(1 - cosθ ** 2)

      ones = np.ones_like(cosθ)
      zeros = np.zeros_like(cosθ)

      q_1 = e_proton * x_1 * np.array([ones, zeros, zeros, ones,])
      q_2 = e_proton * x_2 * np.array([ones, zeros, zeros, -ones,])
      g_3 = (
          2
          ,* e_proton
          ,* x_1
          ,* x_2
          / (x_1 + x_2 - (x_1 - x_2) * cosθ)
          ,* np.array([1 * np.ones_like(cosθ), sinθ * sinφ, cosφ * sinθ, cosθ])
      )
      g_4 = q_1 + q_2 - g_3

      q_1 = q_1.reshape(4, cosθ.size).T
      q_2 = q_2.reshape(4, cosθ.size).T
      g_3 = g_3.reshape(4, cosθ.size).T
      g_4 = g_4.reshape(4, cosθ.size).T

      return np.array([q_1, q_2, g_3, g_4])


  @vectorize([float64(float64, float64, float64, float64, float64)], nopython=True)
  def diff_xs_η(e_proton, charge, η, x_1, x_2):
      """Calculates the differential cross section as a function of the
      cosine of the pseudo rapidity η of one photon in units of 1/GeV².

      Here dΩ=dηdφ

      :param e_proton: proton energy per beam [GeV]
      :param charge: charge of the quark
      :param x_1: momentum fraction of the first quark
      :param x_2: momentum fraction of the second quark
      :param η: pseudo rapidity

      :return: the differential cross section [GeV^{-2}]
      """

      rap = np.arctanh((x_1 - x_2) / (x_1 + x_2))
      f = energy_factor(e_proton, charge, x_1, x_2)

      return f * ((np.tanh(η - rap)) ** 2 + 1)


  @vectorize([float64(float64, float64, float64)], nopython=True)
  def averaged_tchanel_q2(e_proton, x_1, x_2):
      return 2 * x_1 * x_2 * e_proton ** 2


  def cut_pT_from_eta(greater_than=0):
      def cut(e_proton, η, x1, x2):
          cosθ = np.cos(η_to_θ(η))
          _, _, p1, p2 = momenta(e_proton, x1, x2, cosθ)
          return (
              np.sqrt((p1[0][1:3] ** 2).sum()) > greater_than
              and np.sqrt((p2[0][1:3] ** 2).sum()) > greater_than
          )

      return cut
#+end_src

#+RESULTS:

* Tying in the PDF
#+begin_src jupyter-python :exports both :results raw drawer :tangle tangled/pdf.py
  from numba.extending import get_cython_function_address


  def get_xs_distribution_with_pdf(xs, q, e_hadron, quarks=None, pdf=None, cut=None):
      """Creates a function that takes an event (type np.ndarray) of the
      form [angle_arg, impulse fractions of quarks in hadron 1, impulse
      fractions of quarks in hadron 2] and returns the differential
      cross section for such an event. I would have used an object as
      argument, wasn't for the sampling function that needs a vector
      valued function. Angle_Arg can actually be any angular-like parameter
      as long as the xs has the corresponding parameter.

      :param xs: cross section function with signature (energy hadron, angle_arg, x_1, x_2)
      :param q2: the momentum transfer Q^2 as a function with the signature
      (e_hadron, x_1, x_2)
      :param quarks: the constituent quarks np.ndarray of the form [[id, charge], ...],
      the default is a proton
      :param pdf: the PDF to use, the default is "NNPDF31_lo_as_0118"
      :param cut: cut function with signature (energy hadron, angle_arg, x_1,
      x_2) to return 0, when the event does not fit the cut

      :returns: differential cross section summed over flavors and weighted with the pdfs
      :rtype: function
      """

      pdf = pdf or lhapdf.mkPDF("NNPDF31_lo_as_0118", 0)
      quarks = quarks or np.array(
          [[5, -1 / 3], [4, 2 / 3], [3, -1 / 3], [2, 2 / 3], [1, -1 / 3]]
      )  # proton
      supported_quarks = pdf.flavors()
      for flavor in quarks[:, 0]:
          assert flavor in supported_quarks, (
              "The PDF doesn't support the quark flavor " + flavor
          )

      xfxQ2 = pdf.xfxQ2

      # @jit(float64(float64[4])) Unfortunately that does not work as yet!
      def distribution(event: np.ndarray) -> float:
          if cut and not cut(e_hadron, *event):
              return 0

          angle_arg, x_1, x_2 = event

          q2_value = q(e_hadron, x_1, x_2)
          result = 0

          for quark, charge in quarks:
              xs_value = xs(e_hadron, charge, angle_arg, x_1, x_2)
              result += (
                  (xfxQ2(quark, x_1, q2_value) + xfxQ2(-quark, x_1, q2_value))
                  / x_1
                  ,* (xfxQ2(-quark, x_2, q2_value) + xfxQ2(quark, x_2, q2_value))
                  / x_2
                  ,* xs_value
              )

          return result

      return distribution, (pdf.xMin, pdf.xMax)
#+end_src

#+RESULTS:
* Event generation
Now we go about the bussines of generating events. Currently we
calculate the 4-momentum kinematics twice. Maybe that can be done
nicer.

#+begin_src jupyter-python :exports both :results raw drawer :tangle tangled/pdf.py
  def sample_momenta(num_samples, dist, interval, e_hadron, upper_bound=None, **kwargs):
      res, eff = monte_carlo.sample_unweighted_array(
          num_samples,
          dist,
          interval,
          upper_bound=upper_bound,
          report_efficiency=True,
          ,**kwargs
      )
      cosθ, x_1, x_2 = res.T
      return momenta(e_hadron, x_1[None, :], x_2[None, :], cosθ[None, :]), eff
#+end_src

#+RESULTS:

** Switching Horses: Sampling η
We set up a new distribution.
#+begin_src jupyter-python :exports both :results raw drawer
  dist_η, x_limits = get_xs_distribution_with_pdf(
      diff_xs_η, averaged_tchanel_q2, e_proton, cut=cut_pT_from_eta(greater_than=20)
  )
#+end_src

#+RESULTS:

Plotting it, we can see that the variance is reduced.
#+begin_src jupyter-python :exports both :results raw drawer
  fig, ax = set_up_plot()
  ax2 = ax.twinx()
  pts = np.linspace(*interval_η, 1000)

  ax.plot(pts, [dist_η([η, 0.01, 0.01]) for η in pts])
  ax2.plot(pts, [dist_η([η, 1, .1]) for η in pts])
#+end_src

#+RESULTS:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7f7f4f5c3e20> |
[[file:./.ob-jupyter/4fa473a033252c9f6d95d2b6ae3b950d643140b9.png]]
:END:

Lets plot how the pdf looks.
#+begin_src jupyter-python :exports both :results raw drawer
  pdf = lhapdf.mkPDF("NNPDF31_lo_as_0118", 0).xfxQ2
  pts = np.linspace(0.1, 1, 1000)

  fig, ax = set_up_plot()
  ax.plot(pts, [pdf(1, pt, 2*100**2)/pt for pt in pts])
#+end_src

#+RESULTS:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7f7f4d35a460> |
[[file:./.ob-jupyter/4c408dadcdda545d2729103f469d0bcf451c11f9.png]]
:END:


Now we sample some events. Doing this in parallel helps. We let the os
figure out the cpu mapping.

#+begin_src jupyter-python :exports both :results raw drawer
  intervals_η = [interval_η, [0.001, .2], [0.001, .2]]

  result, eff = monte_carlo.sample_unweighted_array(
      10000,
      dist_η,
      interval=intervals_η,
      proc="auto",
      report_efficiency=True,
      #cache="cache/pdf/huge",
  )
  eff
#+end_src

#+RESULTS:
: 0.0032905127227526435



The efficiency is still quite horrible, but at least an order of
mag. better than with cosθ.

Geez. I'd hate having to run this more than once. Let's write it to a
file.

Let's look at a histogramm of eta samples.
#+begin_src jupyter-python :exports both :results raw drawer
  fig, ax = draw_histo_auto(result[:, 0], r"$\eta$", bins=50)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/7b75d6929c60515f7ed9dc980d742814b58f3a0a.png]]


*** Troubleshooting
Sherpas Values are:

#+begin_src jupyter-python :exports both :results raw drawer
  xa=0.00339612
  xb=0.00341069
  Q = 44.2441
  ME = 0.0229133016151736
  sherpa_mom = np.array(
      [
          (22.0747857237618, -0, -0, 22.0747857237618),
          (22.1694647964852, 0, 0, -22.1694647964852),
          (22.1218232785111, -2.27560088138478, 22.0042702977666, 0.0937787670240012),
          (22.1224272417358, 2.27560088138478, -22.0042702977666, -0.188457839747456),
      ]
  )

  sherpa_cosθ = sherpa_mom[2][3] / sherpa_mom[2][0]
  sherpa_cosθ
#+end_src

#+RESULTS:
: 0.004239197006654369

#+begin_src jupyter-python :exports both :results raw drawer
  pdf = lhapdf.mkPDF("NNPDF31_lo_as_0118", 0)


  def evalpdf(x1, x2, q):
      return pdf.xfxQ2(2, x1, q ** 2) * pdf.xfxQ2(2, x2, q ** 2) / (x1 * x2)


  evalpdf(xa, xb, Q)
#+end_src

#+RESULTS:
: 92170.42076857515

Sherpa gave ~81002.8~.
Let's look at the kinematics.

#+begin_src jupyter-python :exports both :results raw drawer
  momenta(e_proton, xa, xb, sherpa_cosθ, 0)
#+end_src

#+RESULTS:
: array([[[ 22.07478   ,   0.        ,   0.        ,  22.07478   ]],
:
:        [[ 22.169485  ,   0.        ,   0.        , -22.169485  ]],
:
:        [[ 22.12183041,   0.        ,  22.12163163,   0.0937788 ]],
:
:        [[ 22.12243459,   0.        , -22.12163163,  -0.1884838 ]]])

Looks OK. Let's look at the matrix element.

#+begin_src jupyter-python :exports both :results raw drawer
ME
#+end_src

#+RESULTS:
: 0.0229133016151736

#+begin_src jupyter-python :exports both :results raw drawer
MY_ME = 4/3*(np.sqrt(4*np.pi*1/137.036)*(2/3))**4*(1+sherpa_cosθ**2)/(1-sherpa_cosθ**2)
MY_ME/ME
#+end_src

#+RESULTS:
: 0.0966611636520755

Faktor 10! Why!

I checked back with the d, dbar process. The ME there has a weird factor ~1/20**4~
#+begin_src jupyter-python :exports both :results raw drawer
  c=-93.8879722861009/100
  4/3*(np.sqrt(4*np.pi*1/137.036)*(1/3)/20)**4*(1+c**2)/(1-c**2)
#+end_src

#+RESULTS:
: 1.373570744771939e-08


Lets see how the xs are picked by sherpa:

#+begin_src jupyter-python :exports both :results raw drawer
  sherpa_x = np.genfromtxt("../../runcards/pp/xas.txt", delimiter=',')
  plt.hist(sherpa_x[:,0] - sherpa_x[:,1], bins=100)
#+end_src

#+RESULTS:
:RESULTS:
| array | ((1.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 0.0 0.0 0.0 0.0 2.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 0.0 1.0 0.0 2.0 3.0 0.0 0.0 0.0 1.0 0.0 2.0 2.0 5.0 3.0 1.0 3.0 3.0 7.0 6.0 8.0 16.0 19.0 24.0 38.0 82.0 354.0 2164.0 1773.0 281.0 80.0 32.0 28.0 10.0 13.0 8.0 8.0 9.0 4.0 2.0 3.0 0.0 2.0 1.0 0.0 2.0 3.0 2.0 1.0 0.0 1.0 1.0 1.0 2.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0)) | array | ((-0.6055 -0.592861 -0.580222 -0.567583 -0.554944 -0.542305 -0.529666 -0.517027 -0.504388 -0.491749 -0.47911 -0.466471 -0.453832 -0.441193 -0.428554 -0.415915 -0.403276 -0.390637 -0.377998 -0.365359 -0.35272 -0.340081 -0.327442 -0.314803 -0.302164 -0.289525 -0.276886 -0.264247 -0.251608 -0.238969 -0.22633 -0.213691 -0.201052 -0.188413 -0.175774 -0.163135 -0.150496 -0.137857 -0.125218 -0.112579 -0.09994 -0.087301 -0.074662 -0.062023 -0.049384 -0.036745 -0.024106 -0.011467 0.001172 0.013811 0.02645 0.039089 0.051728 0.064367 0.077006 0.089645 0.102284 0.114923 0.127562 0.140201 0.15284 0.165479 0.178118 0.190757 0.203396 0.216035 0.228674 0.241313 0.253952 0.266591 0.27923 0.291869 0.304508 0.317147 0.329786 0.342425 0.355064 0.367703 0.380342 0.392981 0.40562 0.418259 0.430898 0.443537 0.456176 0.468815 0.481454 0.494093 0.506732 0.519371 0.53201 0.544649 0.557288 0.569927 0.582566 0.595205 0.607844 0.620483 0.633122 0.645761 0.6584)) | <a | list | of | 100 | Patch | objects> |
[[file:./.ob-jupyter/f1123d7943b6378b3d8ef5c0ec9cf8b2c6eda415.png]]
:END:

They are mostly close together!

#+begin_src jupyter-python :exports both :results raw drawer
plt.hist(sherpa_x[:,0], bins=100)
#+end_src

#+RESULTS:
:RESULTS:
| array | ((3602.0 779.0 224.0 109.0 72.0 39.0 27.0 21.0 13.0 11.0 9.0 11.0 5.0 11.0 6.0 6.0 6.0 4.0 4.0 4.0 3.0 1.0 5.0 1.0 2.0 2.0 2.0 4.0 2.0 0.0 1.0 2.0 0.0 3.0 0.0 1.0 2.0 1.0 1.0 1.0 2.0 0.0 0.0 0.0 2.0 1.0 1.0 2.0 1.0 0.0 2.0 1.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0 1.0 0.0 1.0 0.0 1.0 0.0 1.0)) | array | ((0.001141 0.01074159 0.02034218 0.02994277 0.03954336 0.04914395 0.05874454 0.06834513 0.07794572 0.08754631 0.0971469 0.10674749 0.11634808 0.12594867 0.13554926 0.14514985 0.15475044 0.16435103 0.17395162 0.18355221 0.1931528 0.20275339 0.21235398 0.22195457 0.23155516 0.24115575 0.25075634 0.26035693 0.26995752 0.27955811 0.2891587 0.29875929 0.30835988 0.31796047 0.32756106 0.33716165 0.34676224 0.35636283 0.36596342 0.37556401 0.3851646 0.39476519 0.40436578 0.41396637 0.42356696 0.43316755 0.44276814 0.45236873 0.46196932 0.47156991 0.4811705 0.49077109 0.50037168 0.50997227 0.51957286 0.52917345 0.53877404 0.54837463 0.55797522 0.56757581 0.5771764 0.58677699 0.59637758 0.60597817 0.61557876 0.62517935 0.63477994 0.64438053 0.65398112 0.66358171 0.6731823 0.68278289 0.69238348 0.70198407 0.71158466 0.72118525 0.73078584 0.74038643 0.74998702 0.75958761 0.7691882 0.77878879 0.78838938 0.79798997 0.80759056 0.81719115 0.82679174 0.83639233 0.84599292 0.85559351 0.8651941 0.87479469 0.88439528 0.89399587 0.90359646 0.91319705 0.92279764 0.93239823 0.94199882 0.95159941 0.9612)) | <a | list | of | 100 | Patch | objects> |
[[file:./.ob-jupyter/c005189c49f5d63fb8149aa3c89ef8dcfb092e32.png]]
:END:

#+begin_src jupyter-python :exports both :results raw drawer
plt.hist(sherpa_x[:,1], bins=100)
#+end_src

#+RESULTS:
:RESULTS:
| array | ((3703.0 724.0 207.0 101.0 57.0 32.0 25.0 16.0 14.0 11.0 18.0 13.0 8.0 4.0 9.0 6.0 6.0 1.0 2.0 7.0 3.0 1.0 4.0 2.0 2.0 3.0 0.0 2.0 0.0 4.0 2.0 1.0 1.0 0.0 1.0 2.0 2.0 0.0 1.0 2.0 2.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 1.0 0.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 2.0 0.0 1.0 1.0 3.0 0.0 0.0 1.0 1.0 1.0 0.0 1.0 0.0 1.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 1.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0)) | array | ((0.001183 0.01091017 0.02063734 0.03036451 0.04009168 0.04981885 0.05954602 0.06927319 0.07900036 0.08872753 0.0984547 0.10818187 0.11790904 0.12763621 0.13736338 0.14709055 0.15681772 0.16654489 0.17627206 0.18599923 0.1957264 0.20545357 0.21518074 0.22490791 0.23463508 0.24436225 0.25408942 0.26381659 0.27354376 0.28327093 0.2929981 0.30272527 0.31245244 0.32217961 0.33190678 0.34163395 0.35136112 0.36108829 0.37081546 0.38054263 0.3902698 0.39999697 0.40972414 0.41945131 0.42917848 0.43890565 0.44863282 0.45835999 0.46808716 0.47781433 0.4875415 0.49726867 0.50699584 0.51672301 0.52645018 0.53617735 0.54590452 0.55563169 0.56535886 0.57508603 0.5848132 0.59454037 0.60426754 0.61399471 0.62372188 0.63344905 0.64317622 0.65290339 0.66263056 0.67235773 0.6820849 0.69181207 0.70153924 0.71126641 0.72099358 0.73072075 0.74044792 0.75017509 0.75990226 0.76962943 0.7793566 0.78908377 0.79881094 0.80853811 0.81826528 0.82799245 0.83771962 0.84744679 0.85717396 0.86690113 0.8766283 0.88635547 0.89608264 0.90580981 0.91553698 0.92526415 0.93499132 0.94471849 0.95444566 0.96417283 0.9739)) | <a | list | of | 100 | Patch | objects> |
[[file:./.ob-jupyter/6388377e454166a9557be4588f9d286a25f1b5f1.png]]
:END:

Looks legit...
